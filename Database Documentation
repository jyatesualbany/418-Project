TestTaker Database Documentation

//Here's the information needed to log in to the database.
builder.DataSource = "testtaker.database.windows.net";
builder.UserID = "user";
builder.Password = "Password1";
builder.InitialCatalog = "TestTaker";



-I’ve changed a couple of data type names. I also added the Test table like we talked about at the sprint planning meeting. 
Below is all the code I used to create them and fill them with test data. Feel free to take a look as you develop code for them.

-Also, don’t forget that you guys can make a where clause to limit the search when you’re going through databases. 
I just realized Megan was using a C# loop to go through the whole thing, but that kind of makes the database pointless. 
Here’s an example…
SELECT * FROM Users WHERE USER_NAME = 'user_admin';

-Just in case, don’t forget that you can limit the search too by replacing the * with a Column name. For example…
SELECT PASSWORD FROM Users WHERE USER_NAME = 'user_admin';



CREATE TABLE Users(
USER_NAME varchar(20) PRIMARY KEY,
PASSWORD varchar(20) NOT NULL,
ADMIN BIT NOT NULL
);
INSERT INTO Users VALUES('user_loser','pass',0);
INSERT INTO Users VALUES('user_admin','pass',1);

//For ADMIN, 0 = regular user, 1 = admin


CREATE TABLE User_Grades(
USER_NAME varchar(20),
TEST_ID int,
GRADE int,
FOREIGN KEY(USER_NAME) REFERENCES Users(USER_NAME),
FOREIGN KEY(TEST_ID) REFERENCES Test_Titles(TEST_ID)
);
INSERT INTO User_Grades VALUES('user_loser',1,50);

CREATE TABLE User_Questions_In_Progress(
USER_NAME varchar(20),
TEST_ID int,
QUESTION_ID int,
SELECTED_ANSWER varchar(1),
FOREIGN KEY(USER_NAME) REFERENCES Users(USER_NAME),
FOREIGN KEY(TEST_ID) REFERENCES Test_Titles(TEST_ID),
FOREIGN KEY(QUESTION_ID) REFERENCES Questions(QUESTION_ID)
);
//Here is where all the in progress test data will be stored. This will be a single table that will keep track of all the questions
//that have been answered on incomplete tests.
//Of important note: the SELECTED_ANSWER can be set to 'A','B','C', or 'D' for multiple choice or 'T' or 'F' for true or false.
//Also, if it is left null that means that the answer wasn't filled in, although in that case the question won't even need to be stored.

CREATE TABLE Question_Categories(
CATEGORY_ID int PRIMARY KEY,
CATEGORY varchar(20),
);
INSERT INTO Question_Categories VALUES (1, 'Ducks');
INSERT INTO Question_Categories VALUES (2, 'Math');

CREATE TABLE Questions(
QUESTION_ID int PRIMARY KEY,
CATEGORY_ID int,
TRUE_FALSE BIT NOT NULL,
QUESTION_TEXT varchar(100) NOT NULL,
ANS1 varchar(100),
ANS2 varchar(100),
ANS3 varchar(100),
ANS4 varchar(100),
FOREIGN KEY(CATEGORY_ID) REFERENCES Question_Catagories(CATEGORY_ID)
);
INSERT INTO Questions VALUES(
1,
1,
0,
'What sound does a duck make?',
'The walls have eyes',
'Pikachu!',
'Kermit the frog here!',
'*Quack!'
);
//Asterix in front of answer means it is the correct one.

INSERT INTO Questions(QUESTION_ID,CATEGORY_ID,TRUE_FALSE,QUESTION_TEXT) VALUES(
2,
1,
1,
'Does Donald Duck wear pants?'
);
//If there is no asterix before the question in a true/false question text then the answer is false.


CREATE TABLE Test_Titles(
TEST_ID int PRIMARY KEY,
TEST_TITLE varchar(20),
);
INSERT INTO Test_Titles VALUES (1, 'Duck Test #1');
INSERT INTO Test_Titles VALUES (2, 'Math Test');


CREATE TABLE Tests(
TEST_ID int,
QUESTION_ID int,
FOREIGN KEY(TEST_ID) REFERENCES Test_Titles(TEST_ID),
FOREIGN KEY(QUESTION_ID) REFERENCES Questions(QUESTION_ID)
);
INSERT INTO Tests VALUES (1, 1);
INSERT INTO Tests VALUES (1, 2);
